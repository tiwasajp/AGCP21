/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for conversational search.
 * @class
 * @memberof v1
 */
export declare class ConversationalSearchServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    conversationalSearchServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ConversationalSearchServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ConversationalSearchServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Converses a conversation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Conversation to get. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
     *   Use
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
     *   to activate auto session mode, which automatically creates a new
     *   conversation inside a ConverseConversation session.
     * @param {google.cloud.discoveryengine.v1.TextInput} request.query
     *   Required. Current user input.
     * @param {string} request.servingConfig
     *   The resource name of the Serving Config to use. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`
     *   If this is not set, the default serving config will be used.
     * @param {google.cloud.discoveryengine.v1.Conversation} request.conversation
     *   The conversation to be used by auto session only. The name field will be
     *   ignored as we automatically assign new name for the conversation in auto
     *   session.
     * @param {boolean} request.safeSearch
     *   Whether to turn on safe search.
     * @param {number[]} request.userLabels
     *   The user labels applied to a resource must meet the following requirements:
     *
     *   * Each resource can have multiple labels, up to a maximum of 64.
     *   * Each label must be a key-value pair.
     *   * Keys have a minimum length of 1 character and a maximum length of 63
     *     characters and cannot be empty. Values can be empty and have a maximum
     *     length of 63 characters.
     *   * Keys and values can contain only lowercase letters, numeric characters,
     *     underscores, and dashes. All characters must use UTF-8 encoding, and
     *     international characters are allowed.
     *   * The key portion of a label must be unique. However, you can use the same
     *     key with multiple resources.
     *   * Keys must start with a lowercase letter or international character.
     *
     *   See [Google Cloud
     *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
     *   for more details.
     * @param {google.cloud.discoveryengine.v1.SearchRequest.ContentSearchSpec.SummarySpec} request.summarySpec
     *   A specification for configuring the summary returned in the response.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.ConverseConversationResponse|ConverseConversationResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/conversational_search_service.converse_conversation.js</caption>
     * region_tag:discoveryengine_v1_generated_ConversationalSearchService_ConverseConversation_async
     */
    converseConversation(request?: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
        (protos.google.cloud.discoveryengine.v1.IConverseConversationRequest | undefined),
        {} | undefined
    ]>;
    converseConversation(request: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1.IConverseConversationResponse, protos.google.cloud.discoveryengine.v1.IConverseConversationRequest | null | undefined, {} | null | undefined>): void;
    converseConversation(request: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1.IConverseConversationResponse, protos.google.cloud.discoveryengine.v1.IConverseConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a Conversation.
     *
     * If the {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to
     * create already exists, an ALREADY_EXISTS error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Full resource name of parent data store. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {google.cloud.discoveryengine.v1.Conversation} request.conversation
     *   Required. The conversation to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/conversational_search_service.create_conversation.js</caption>
     * region_tag:discoveryengine_v1_generated_ConversationalSearchService_CreateConversation_async
     */
    createConversation(request?: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1.IConversation,
        (protos.google.cloud.discoveryengine.v1.ICreateConversationRequest | undefined),
        {} | undefined
    ]>;
    createConversation(request: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1.IConversation, protos.google.cloud.discoveryengine.v1.ICreateConversationRequest | null | undefined, {} | null | undefined>): void;
    createConversation(request: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1.IConversation, protos.google.cloud.discoveryengine.v1.ICreateConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a Conversation.
     *
     * If the {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to
     * delete does not exist, a NOT_FOUND error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Conversation to delete. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/conversational_search_service.delete_conversation.js</caption>
     * region_tag:discoveryengine_v1_generated_ConversationalSearchService_DeleteConversation_async
     */
    deleteConversation(request?: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest | undefined),
        {} | undefined
    ]>;
    deleteConversation(request: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest | null | undefined, {} | null | undefined>): void;
    deleteConversation(request: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a Conversation.
     *
     * {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} action type
     * cannot be changed. If the
     * {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to update does
     * not exist, a NOT_FOUND error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.discoveryengine.v1.Conversation} request.conversation
     *   Required. The Conversation to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Indicates which fields in the provided
     *   {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to update. The
     *   following are NOT supported:
     *
     *   * {@link protos.|conversation.name}
     *
     *   If not set or empty, all supported fields are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/conversational_search_service.update_conversation.js</caption>
     * region_tag:discoveryengine_v1_generated_ConversationalSearchService_UpdateConversation_async
     */
    updateConversation(request?: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1.IConversation,
        (protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest | undefined),
        {} | undefined
    ]>;
    updateConversation(request: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1.IConversation, protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest | null | undefined, {} | null | undefined>): void;
    updateConversation(request: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1.IConversation, protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a Conversation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Conversation to get. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/conversational_search_service.get_conversation.js</caption>
     * region_tag:discoveryengine_v1_generated_ConversationalSearchService_GetConversation_async
     */
    getConversation(request?: protos.google.cloud.discoveryengine.v1.IGetConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1.IConversation,
        (protos.google.cloud.discoveryengine.v1.IGetConversationRequest | undefined),
        {} | undefined
    ]>;
    getConversation(request: protos.google.cloud.discoveryengine.v1.IGetConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1.IConversation, protos.google.cloud.discoveryengine.v1.IGetConversationRequest | null | undefined, {} | null | undefined>): void;
    getConversation(request: protos.google.cloud.discoveryengine.v1.IGetConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1.IConversation, protos.google.cloud.discoveryengine.v1.IGetConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists all Conversations by their parent
     * {@link protos.google.cloud.discoveryengine.v1.DataStore|DataStore}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `conversation_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listConversationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConversations(request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1.IConversation[],
        protos.google.cloud.discoveryengine.v1.IListConversationsRequest | null,
        protos.google.cloud.discoveryengine.v1.IListConversationsResponse
    ]>;
    listConversations(request: protos.google.cloud.discoveryengine.v1.IListConversationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.discoveryengine.v1.IListConversationsRequest, protos.google.cloud.discoveryengine.v1.IListConversationsResponse | null | undefined, protos.google.cloud.discoveryengine.v1.IConversation>): void;
    listConversations(request: protos.google.cloud.discoveryengine.v1.IListConversationsRequest, callback: PaginationCallback<protos.google.cloud.discoveryengine.v1.IListConversationsRequest, protos.google.cloud.discoveryengine.v1.IListConversationsResponse | null | undefined, protos.google.cloud.discoveryengine.v1.IConversation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `conversation_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConversationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConversationsStream(request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listConversations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `conversation_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/conversational_search_service.list_conversations.js</caption>
     * region_tag:discoveryengine_v1_generated_ConversationalSearchService_ListConversations_async
     */
    listConversationsAsync(request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.discoveryengine.v1.IConversation>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified projectLocationCollectionDataStore resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStorePath(project: string, location: string, collection: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreBranchDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreBranchDocumentPath(project: string, location: string, collection: string, dataStore: string, branch: string, document: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the branch from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the document from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreConversationPath(project: string, location: string, collection: string, dataStore: string, conversation: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} schema
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSchemaPath(project: string, location: string, collection: string, dataStore: string, schema: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the schema from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the schema.
     */
    matchSchemaFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreServingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreServingConfigPath(project: string, location: string, collection: string, dataStore: string, servingConfig: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the serving_config from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStore resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationDataStorePath(project: string, location: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationDataStore resource.
     *
     * @param {string} projectLocationDataStoreName
     *   A fully-qualified path representing project_location_data_store resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreName(projectLocationDataStoreName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStore resource.
     *
     * @param {string} projectLocationDataStoreName
     *   A fully-qualified path representing project_location_data_store resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreName(projectLocationDataStoreName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStore resource.
     *
     * @param {string} projectLocationDataStoreName
     *   A fully-qualified path representing project_location_data_store resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreName(projectLocationDataStoreName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreBranchDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreBranchDocumentPath(project: string, location: string, dataStore: string, branch: string, document: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the branch from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the document from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreConversationPath(project: string, location: string, dataStore: string, conversation: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} schema
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSchemaPath(project: string, location: string, dataStore: string, schema: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Parse the schema from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the schema.
     */
    matchSchemaFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreServingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreServingConfigPath(project: string, location: string, dataStore: string, servingConfig: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Parse the serving_config from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
