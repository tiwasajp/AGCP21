"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/document_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./document_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for ingesting
 *  {@link protos.google.cloud.discoveryengine.v1beta.Document|Document} information of the
 *  customer's website.
 * @class
 * @memberof v1beta
 */
class DocumentServiceClient {
    /**
     * Construct an instance of DocumentServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DocumentServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            projectLocationCollectionDataStoreBranchPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}'),
            projectLocationCollectionDataStoreBranchDocumentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}'),
            projectLocationCollectionDataStoreConversationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/conversations/{conversation}'),
            projectLocationCollectionDataStoreSchemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}'),
            projectLocationDataStoreBranchPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}'),
            projectLocationDataStoreBranchDocumentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}'),
            projectLocationDataStoreConversationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataStores/{data_store}/conversations/{conversation}'),
            projectLocationDataStoreSchemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataStores/{data_store}/schemas/{schema}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/branches/*/operations/*}',
                    additional_bindings: [
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/models/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/schemas/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/siteSearchEngine/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/siteSearchEngine/targetSites/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/engines/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/dataStores/*/branches/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/dataStores/*/models/*/operations/*}',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/dataStores/*/operations/*}',
                        },
                        { get: '/v1beta/{name=projects/*/locations/*/operations/*}' },
                        { get: '/v1beta/{name=projects/*/operations/*}' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/branches/*}/operations',
                    additional_bindings: [
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/models/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/schemas/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/siteSearchEngine/targetSites}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*/siteSearchEngine}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/dataStores/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*/engines/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/collections/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/dataStores/*/branches/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/dataStores/*/models/*}/operations',
                        },
                        {
                            get: '/v1beta/{name=projects/*/locations/*/dataStores/*}/operations',
                        },
                        { get: '/v1beta/{name=projects/*/locations/*}/operations' },
                        { get: '/v1beta/{name=projects/*}/operations' },
                    ],
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const importDocumentsResponse = protoFilesRoot.lookup('.google.cloud.discoveryengine.v1beta.ImportDocumentsResponse');
        const importDocumentsMetadata = protoFilesRoot.lookup('.google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata');
        const purgeDocumentsResponse = protoFilesRoot.lookup('.google.cloud.discoveryengine.v1beta.PurgeDocumentsResponse');
        const purgeDocumentsMetadata = protoFilesRoot.lookup('.google.cloud.discoveryengine.v1beta.PurgeDocumentsMetadata');
        this.descriptors.longrunning = {
            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),
            purgeDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, purgeDocumentsResponse.decode.bind(purgeDocumentsResponse), purgeDocumentsMetadata.decode.bind(purgeDocumentsMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.discoveryengine.v1beta.DocumentService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.documentServiceStub) {
            return this.documentServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.discoveryengine.v1beta.DocumentService.
        this.documentServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.discoveryengine.v1beta.DocumentService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.discoveryengine.v1beta
                    .DocumentService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const documentServiceStubMethods = [
            'getDocument',
            'listDocuments',
            'createDocument',
            'updateDocument',
            'deleteDocument',
            'importDocuments',
            'purgeDocuments',
        ];
        for (const methodName of documentServiceStubMethods) {
            const callPromise = this.documentServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.documentServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'discoveryengine.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'discoveryengine.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDocument(request, options, callback);
    }
    createDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDocument(request, options, callback);
    }
    updateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDocument(request, options, callback);
    }
    deleteDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDocument(request, options, callback);
    }
    importDocuments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.importDocuments(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importDocuments()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/document_service.import_documents.js</caption>
     * region_tag:discoveryengine_v1beta_generated_DocumentService_ImportDocuments_async
     */
    async checkImportDocumentsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importDocuments, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    purgeDocuments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.purgeDocuments(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `purgeDocuments()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/document_service.purge_documents.js</caption>
     * region_tag:discoveryengine_v1beta_generated_DocumentService_PurgeDocuments_async
     */
    async checkPurgeDocumentsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.purgeDocuments, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listDocuments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDocuments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent branch resource name, such as
     *   `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
     *   Use `default_branch` as the branch ID, to list documents under the default
     *   branch.
     *
     *   If the caller does not have permission to list
     *   {@link protos.google.cloud.discoveryengine.v1beta.Document|Document}s under this
     *   branch, regardless of whether or not this branch exists, a
     *   `PERMISSION_DENIED` error is returned.
     * @param {number} request.pageSize
     *   Maximum number of {@link protos.google.cloud.discoveryengine.v1beta.Document|Document}s
     *   to return. If unspecified, defaults to 100. The maximum allowed value is
     *   1000. Values above 1000 will be coerced to 1000.
     *
     *   If this field is negative, an `INVALID_ARGUMENT` error is returned.
     * @param {string} request.pageToken
     *   A page token
     *   {@link protos.google.cloud.discoveryengine.v1beta.ListDocumentsResponse.next_page_token|ListDocumentsResponse.next_page_token},
     *   received from a previous
     *   {@link protos.google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   {@link protos.google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
     *   must match the call that provided the page token. Otherwise, an
     *   `INVALID_ARGUMENT` error is returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.discoveryengine.v1beta.Document|Document} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDocumentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDocumentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDocuments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);
    }
    /**
     * Equivalent to `listDocuments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent branch resource name, such as
     *   `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
     *   Use `default_branch` as the branch ID, to list documents under the default
     *   branch.
     *
     *   If the caller does not have permission to list
     *   {@link protos.google.cloud.discoveryengine.v1beta.Document|Document}s under this
     *   branch, regardless of whether or not this branch exists, a
     *   `PERMISSION_DENIED` error is returned.
     * @param {number} request.pageSize
     *   Maximum number of {@link protos.google.cloud.discoveryengine.v1beta.Document|Document}s
     *   to return. If unspecified, defaults to 100. The maximum allowed value is
     *   1000. Values above 1000 will be coerced to 1000.
     *
     *   If this field is negative, an `INVALID_ARGUMENT` error is returned.
     * @param {string} request.pageToken
     *   A page token
     *   {@link protos.google.cloud.discoveryengine.v1beta.ListDocumentsResponse.next_page_token|ListDocumentsResponse.next_page_token},
     *   received from a previous
     *   {@link protos.google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   {@link protos.google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
     *   must match the call that provided the page token. Otherwise, an
     *   `INVALID_ARGUMENT` error is returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.discoveryengine.v1beta.Document|Document}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/document_service.list_documents.js</caption>
     * region_tag:discoveryengine_v1beta_generated_DocumentService_ListDocuments_async
     */
    listDocumentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDocuments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreBranch resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} branch
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreBranchPath(project, location, collection, dataStore, branch) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.render({
            project: project,
            location: location,
            collection: collection,
            data_store: dataStore,
            branch: branch,
        });
    }
    /**
     * Parse the project from ProjectLocationCollectionDataStoreBranch resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchName
     *   A fully-qualified path representing project_location_collection_data_store_branch resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreBranchName(projectLocationCollectionDataStoreBranchName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(projectLocationCollectionDataStoreBranchName).project;
    }
    /**
     * Parse the location from ProjectLocationCollectionDataStoreBranch resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchName
     *   A fully-qualified path representing project_location_collection_data_store_branch resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreBranchName(projectLocationCollectionDataStoreBranchName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(projectLocationCollectionDataStoreBranchName).location;
    }
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreBranch resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchName
     *   A fully-qualified path representing project_location_collection_data_store_branch resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreBranchName(projectLocationCollectionDataStoreBranchName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(projectLocationCollectionDataStoreBranchName).collection;
    }
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreBranch resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchName
     *   A fully-qualified path representing project_location_collection_data_store_branch resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreBranchName(projectLocationCollectionDataStoreBranchName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(projectLocationCollectionDataStoreBranchName).data_store;
    }
    /**
     * Parse the branch from ProjectLocationCollectionDataStoreBranch resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchName
     *   A fully-qualified path representing project_location_collection_data_store_branch resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationCollectionDataStoreBranchName(projectLocationCollectionDataStoreBranchName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(projectLocationCollectionDataStoreBranchName).branch;
    }
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreBranchDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreBranchDocumentPath(project, location, collection, dataStore, branch, document) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.render({
            project: project,
            location: location,
            collection: collection,
            data_store: dataStore,
            branch: branch,
            document: document,
        });
    }
    /**
     * Parse the project from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(projectLocationCollectionDataStoreBranchDocumentName).project;
    }
    /**
     * Parse the location from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(projectLocationCollectionDataStoreBranchDocumentName).location;
    }
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(projectLocationCollectionDataStoreBranchDocumentName).collection;
    }
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(projectLocationCollectionDataStoreBranchDocumentName).data_store;
    }
    /**
     * Parse the branch from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(projectLocationCollectionDataStoreBranchDocumentName).branch;
    }
    /**
     * Parse the document from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(projectLocationCollectionDataStoreBranchDocumentName).document;
    }
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreConversationPath(project, location, collection, dataStore, conversation) {
        return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.render({
            project: project,
            location: location,
            collection: collection,
            data_store: dataStore,
            conversation: conversation,
        });
    }
    /**
     * Parse the project from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName) {
        return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(projectLocationCollectionDataStoreConversationName).project;
    }
    /**
     * Parse the location from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName) {
        return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(projectLocationCollectionDataStoreConversationName).location;
    }
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName) {
        return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(projectLocationCollectionDataStoreConversationName).collection;
    }
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName) {
        return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(projectLocationCollectionDataStoreConversationName).data_store;
    }
    /**
     * Parse the conversation from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName) {
        return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(projectLocationCollectionDataStoreConversationName).conversation;
    }
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} schema
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSchemaPath(project, location, collection, dataStore, schema) {
        return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.render({
            project: project,
            location: location,
            collection: collection,
            data_store: dataStore,
            schema: schema,
        });
    }
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName) {
        return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(projectLocationCollectionDataStoreSchemaName).project;
    }
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName) {
        return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(projectLocationCollectionDataStoreSchemaName).location;
    }
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName) {
        return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(projectLocationCollectionDataStoreSchemaName).collection;
    }
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName) {
        return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(projectLocationCollectionDataStoreSchemaName).data_store;
    }
    /**
     * Parse the schema from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the schema.
     */
    matchSchemaFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName) {
        return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(projectLocationCollectionDataStoreSchemaName).schema;
    }
    /**
     * Return a fully-qualified projectLocationDataStoreBranch resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} branch
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreBranchPath(project, location, dataStore, branch) {
        return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.render({
            project: project,
            location: location,
            data_store: dataStore,
            branch: branch,
        });
    }
    /**
     * Parse the project from ProjectLocationDataStoreBranch resource.
     *
     * @param {string} projectLocationDataStoreBranchName
     *   A fully-qualified path representing project_location_data_store_branch resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreBranchName(projectLocationDataStoreBranchName) {
        return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(projectLocationDataStoreBranchName).project;
    }
    /**
     * Parse the location from ProjectLocationDataStoreBranch resource.
     *
     * @param {string} projectLocationDataStoreBranchName
     *   A fully-qualified path representing project_location_data_store_branch resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreBranchName(projectLocationDataStoreBranchName) {
        return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(projectLocationDataStoreBranchName).location;
    }
    /**
     * Parse the data_store from ProjectLocationDataStoreBranch resource.
     *
     * @param {string} projectLocationDataStoreBranchName
     *   A fully-qualified path representing project_location_data_store_branch resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreBranchName(projectLocationDataStoreBranchName) {
        return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(projectLocationDataStoreBranchName).data_store;
    }
    /**
     * Parse the branch from ProjectLocationDataStoreBranch resource.
     *
     * @param {string} projectLocationDataStoreBranchName
     *   A fully-qualified path representing project_location_data_store_branch resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationDataStoreBranchName(projectLocationDataStoreBranchName) {
        return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(projectLocationDataStoreBranchName).branch;
    }
    /**
     * Return a fully-qualified projectLocationDataStoreBranchDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreBranchDocumentPath(project, location, dataStore, branch, document) {
        return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.render({
            project: project,
            location: location,
            data_store: dataStore,
            branch: branch,
            document: document,
        });
    }
    /**
     * Parse the project from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(projectLocationDataStoreBranchDocumentName).project;
    }
    /**
     * Parse the location from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(projectLocationDataStoreBranchDocumentName).location;
    }
    /**
     * Parse the data_store from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(projectLocationDataStoreBranchDocumentName).data_store;
    }
    /**
     * Parse the branch from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(projectLocationDataStoreBranchDocumentName).branch;
    }
    /**
     * Parse the document from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName) {
        return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(projectLocationDataStoreBranchDocumentName).document;
    }
    /**
     * Return a fully-qualified projectLocationDataStoreConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreConversationPath(project, location, dataStore, conversation) {
        return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.render({
            project: project,
            location: location,
            data_store: dataStore,
            conversation: conversation,
        });
    }
    /**
     * Parse the project from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName) {
        return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(projectLocationDataStoreConversationName).project;
    }
    /**
     * Parse the location from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName) {
        return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(projectLocationDataStoreConversationName).location;
    }
    /**
     * Parse the data_store from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName) {
        return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(projectLocationDataStoreConversationName).data_store;
    }
    /**
     * Parse the conversation from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName) {
        return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(projectLocationDataStoreConversationName).conversation;
    }
    /**
     * Return a fully-qualified projectLocationDataStoreSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} schema
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSchemaPath(project, location, dataStore, schema) {
        return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.render({
            project: project,
            location: location,
            data_store: dataStore,
            schema: schema,
        });
    }
    /**
     * Parse the project from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName) {
        return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(projectLocationDataStoreSchemaName).project;
    }
    /**
     * Parse the location from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName) {
        return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(projectLocationDataStoreSchemaName).location;
    }
    /**
     * Parse the data_store from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName) {
        return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(projectLocationDataStoreSchemaName).data_store;
    }
    /**
     * Parse the schema from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the schema.
     */
    matchSchemaFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName) {
        return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(projectLocationDataStoreSchemaName).schema;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.documentServiceStub && !this._terminated) {
            return this.documentServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DocumentServiceClient = DocumentServiceClient;
//# sourceMappingURL=document_service_client.js.map